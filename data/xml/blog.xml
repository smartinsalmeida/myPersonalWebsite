<?xml version="1.0" encoding="UTF-8"?>
<blog>
<!--    <post slug="">
        <title></title>
        <resume></resume>
        <content>
            <![CDATA[
            <div class="post">
                
            </div>
            ]]>
        </content>
        <image></image>
        <date>4 March, 2012</date>
        <category>tutorial</category>
        <tags>Symfony2, Doctrine, Cache</tags>
    </post>-->
    <post slug="debug-php-project-with-xdebug-on-netbeans">
        <title>How to debug a PHP project with Xdebug on NetBeans</title>
        <resume>No more error_log or var_dump in your code</resume>
        <content>
            <![CDATA[
            <div class="post">
                <p><a href="http://xdebug.org/" target="_blank">Xdebug is a great tool to debug your PHP code, but make sure it is only used in your dev environment. It consumes a lot of memory and pages will load slower.</a>
                <p>First thing is to install it. In my Ubuntu 12.10 box it was as simple as running:</p>
                <div class="prettyprint">
                    sudo apt-get install php5-xdebug
                </div>
                <p>Then I had to configure Xdebug editing the file /etc/php5/apache2/conf.d/20-xdebug.ini. The file will look like:</p>
<pre class="prettyprint">
zend_extension=/usr/lib/php5/20100525/xdebug.so
xdebug.remote_enable=on
xdebug.remote_handler=dbgp
xdebug.remote_mode=req
xdebug.remote_host=localhost
xdebug.remote_port=9000
xdebug.idekey="netbeans-xdebug"
xdebug.remote_log="/var/log/apache2/xdebug_remote.log"
</pre>
                <p>Next step is to configure NetBeans. Check the properties of your project.</p>
                <ul>
                    <li>Make sure the Web root in the Sources categories points to your public forlder, web in a Symfony2 project</li>
                    <li>In the Run Configuration category, specify the name of your controller, in a Symfony2 project will be app_dev.php</li>
                    <li>Click on the Advanced button, and in the Debug URL, choose the <i>Ask every time</i> option. This way you can change the url to point to another location other than the index page.</li>
                </ul>
                
                <p>Insert breakpoints in your code with Ctrl+F8 or just click over the line number, a red square will show up.</p>
                <p>To start the debug, press Ctrl+F5 or click on the Debug Project button on the toolbar.</p>
                <p>Edit the URL of the page you want to debug and press Start. A new tab on your browser will open up and will remain blank. Get back to NetBeans play with Debug button on the toolbar.</p>
                <p>Everytime you reach a breakpoint, execution will stop and you can check on the debug window the values of your variables.</p>
                <p>Check out <a href="http://netbeans.org/kb/docs/php/debugging.html">the official NetBeans webpage</a> for more info.</p>
            </div>
            ]]>
        </content>
        <image></image>
        <date>7 December, 2012</date>
        <category>tutorial</category>
        <tags>Xdebug, Netbeans, Symfony2, Ubuntu</tags>
    </post>
    <post slug="deploy-symfony2-project-with-capifony">
        <title>Deploy a Symfony2 project with capifony</title>
        <resume>Making deployment easier and less error prone</resume>
        <content>
            <![CDATA[
            <div class="post">
                <p>Deployment is a very recurrent task and tends to be very repetitive and error prone when done manually.</p>
                <p>It gets even worse if your application is behind a load balancer and you have to deploy to several servers at once.</p>
                <p>Capifony comes to the rescue. It integrates easily with symfony1 and Symfony2 projects.</p>
                <p>Before using Capifony we must decide the strategy we will use to deploy our code. In the documentation they present two cenarios. First one is the one I use. My dev code is published to a central git repository that production servers have access.</p>
                <p>Here you have the sources I consulted to configure Capifony in my project.</p>
                <ul>
                    <li><a href="http://capifony.org/" target="_blank">Official documentation</a></li>
                    <li><a href="http://blog.servergrove.com/2011/09/07/deploying-symfony2-projects-on-shared-hosting-with-capifony/" target="_blank">ServerGrove tutorial for shared hosts</a></li>
                    <li><a href="http://blog.servergrove.com/2010/07/12/symfony-git-capistrano-capifony/" target="_blank">ServerGrove tutorial for VPS hosts</a></li>
                    <li><a href="http://www.zalas.eu/multistage-deployment-of-symfony-applications-with-capifony" target="_blank">Tutorial on how to deploy on multiple servers</a></li>
                </ul>
                <p>Even with all that documentation it wasn't easy for me to setup the config file will all my requirements, so I publish my final version:</p>
<pre type="prettyprint">
#before "deploy:restart", "deploy:set_permissions"
before "symfony:composer:install", "composer:copy_vendors"
before "symfony:composer:update", "composer:copy_vendors"

set :application, "MyApplication"

# SSH settings
set :serverName,  "www.example.com"
set :domain,      "example.com"
set :user,        "ubuntu"
ssh_options[:port] = 22
ssh_options[:keys] = ["/path/to/my/ssh/key.pem"]
set :deploy_to,   "/var/www/example.com"
set :app_path,    "app"

# Repository settings
set :repository,  "git@bitbucket.org:user/example.git"
set :scm,         :git
set :git_enable_submodules,  0

# Symfony settings
set :model_manager, "doctrine"
role :web,        domain                         # Your HTTP server, Apache/etc
role :app,        domain                         # This may be the same as your `Web` server
role :db,         domain, :primary => true       # This is where Symfony2 migrations will run

# Composer settings
set :use_composer, true
set :update_vendors, true
set :vendors_mode, "install"

namespace :composer do
  task :copy_vendors, :except => { :no_release => true } do
    capifony_pretty_print "--> Copy vendor file from previous release"

    run "vendorDir=#{current_path}/vendor; if [ -d $vendorDir ] || [ -h $vendorDir ]; then cp -a $vendorDir #{latest_release}/vendor; fi;"
    capifony_puts_ok
  end
end

# General settings
set :shared_files,    ["app/config/parameters.yml"]
set :shared_children, [app_path + "/logs", web_path + "/uploads"]
set :keep_releases,  3
set :use_sudo, false
set :writable_dirs,     [app_path + "/logs", app_path + "/cache", web_path + "/uploads"]
set :webserver_user,    "www-data"
set :permission_method, :acl
set :use_set_permissions, true

# Log level
logger.level = Logger::MAX_LEVEL
</pre>
            </div>
            ]]>
        </content>
        <image></image>
        <date>5 December, 2012</date>
        <category>tutorial</category>
        <tags>Capifony, Symfony2, Deployment</tags>
    </post>
    <post slug="integrate-zend2-packages-with-composer">
        <title>How to integrate Zend2 packages with Composer</title>
        <resume>Making use of the Zend2 packages</resume>
        <content>
            <![CDATA[
            <div class="post">
                <p>In case you use <a href="http://getcomposer.org/" target="_blank">composer</a> to manage the dependencies of your PHP project, it will be very easy to integrate Zend2 packages.</p>
                <p>Zend2 has its own repository, doesn't use <a href="https://packagist.org/" target="_blank">packagist</a>, so you will need to configure it in your composer.json file.</p>
<pre class="prettyprint lang-json">
"repositories": [
    {
        "type": "composer",
        "url": "http://packages.zendframework.com/"
    }
]
</pre>
                <p>After adding the Zend2 repository, you can easily download <a href="http://packages.zendframework.com/">any of the packages</a> available. All you have to do is specifiy it in the require section of composer.json file.</p>
<pre class="prettyprint lang-json">
"require": {
    "zendframework/zendgdata": "2.0.*",
    "zendframework/zend-paginator": "2.0.*",
    "zendframework/zendservice-flickr": "2.0.*",
    "zendframework/zend-feed": "2.0.*"
}
</pre>
            </div>
            ]]>
        </content>
        <image></image>
        <date>26 November, 2012</date>
        <category>tutorial</category>
        <tags>Zend2, Composer, Packages</tags>
    </post>
    <post slug="cache-data-in-symfony2">
        <title>Cache Data in Symfony2</title>
        <resume>Use Doctrine library to cache data in Symfony2</resume>
        <content>
            <![CDATA[
            <div class="post">
                <p>Doctrine provides a Cache Layer. A very good one, indeed. So if you need to cache data use Doctrine/Commons.</p>
                <p>This Cache Layer abstracts the caching functionality and provides already various different backends for your caching data.</p>
                <p>These are already build-in in the master version:</p>
                <ul>
                    <li>APC</li>
                    <li>Array</li>
                    <li>Filesystem</li>
                    <li>Memcache</li>
                    <li>PhpFile</li>
                    <li>Redis</li>
                    <li>WinCache</li>
                    <li>Xcache</li>
                    <li>ZendData</li>
                </ul>
                <p>You could even create your own on top of the CacheProvider class and the Cache interface.</p>
                <p>In your Symfony2 project simply register your cache service of choice and your ready to go.</p>
                <p>In your config.yml or services.yml add:</p>
<pre class="prettyprint lang-yml">
cache:
    class: Doctrine\Common\Cache\PhpFileCache
    arguments: [%kernel.cache_dir%]
</pre>
                <p>And in your controller you can call the service and save and load data from the cache.</p>
<pre class="prettyprint lang-php">
$cache = $this->get('cache');
$cache->setNamespace('mynamespace.cache');

if (false === ($cached_data = $cache->fetch($cache_key)))
{
    $cached_data = $SOMEAPI->getData($params);
    $cache->save($cache_key, $cached_data, 3600);//TTL 1h
}
</pre>
                <p>As you can see you can set a namespace for your cache data, so that you can easy use it for different scenarions in the same app.</p>
                <p>Further you can set a time-to-live (TTL) in seconds as third parameter of the save method.</p>
                <p>So after all symfony2 has a caching mechanism for data, its just a little hidden in the Doctrine/Commons dependency.</p>
                <small><a href="http://nerdpress.org/2012/07/10/caching-data-in-symfony2/" target="_blank">Original source</a></small>
            </div>
            ]]>
        </content>
        <image></image>
        <date>23 November, 2012</date>
        <category>tutorial</category>
        <tags>Symfony2, Doctrine, Cache</tags>
    </post>
    <post slug="mysql-and-phpmyadmin-on-fedora-16">
        <title>MySQL and phpMyAdmin on Fedora 16</title>
        <resume>How to setup MySQL and phpMyAdmin on Fedora 16</resume>
        <content>
            <![CDATA[
            <div class="post">
                <p>For my surprise, after installing MySQL server, there was no service mysqld in /etc/init.d, so I could not start mysql server with the command /etc/init.d/mysqld start</p>
                <h3>Installating MySQL</h3>
                <div class="prettyprint">
                    # yum install mysql-server
                </div>
                <p>So it seems that now, to start a service we must run the command systemctl.</p>
                <div class="prettyprint">
                    # systemctl start mysqld.service
                </div>
                <p>In case you want to enable the mysql when you start your computer:</p>
                <div class="prettyprint">
                    # systemctl enable mysqld.service
                </div>
                <p>Another thing that hit me by surprise is that phpMyAdmin doesn’t work out of the box, you need to configure some options.</p>
                <p>Edit the files /etc/httpd/conf.d/phpMyAdmin.conf and /etc/phpMyAdmin/config.inc.php (main one).</p>
                <p>In my case, I set a random string to the blowfish_secret option, changed auth_type to cookie instead of the default http, and changed to TRUE the option to allow no password (AllowNoPassword).</p>
                <p>After a restart of the apache server (# systemctl restart httpd.service), I was ready to go.</p>
            </div>
            ]]>
        </content>
        <image></image>
        <date>11 November, 2012</date>
        <category>tutorial</category>
        <tags>MySQL, Fedora, phpMyAdmin</tags>
    </post>
    <post slug="avoid-password-prompt-on-the-command-line">
        <title>Avoid password prompt on the command line</title>
        <resume>Configure ssh to login automatically on a remote server</resume>
        <content>
            <![CDATA[
            <div class="post">
                <p>In case you often connect to remote server and get bored of typing the password all the time, there is a solution.</p>
                <p>Create a public key, running the command</p>
                <div class="prettyprint">
                    $ ssh-keygen -t rsa
                </div>
                <p>A file ~/.ssh/id_rsa.pub will be created with your public key.</p>
                <p><strong>Now, publish the key to the server</strong></p>
                <div class="prettyprint">
                    cat ~/.ssh/id_rsa.pub | ssh USER@DOMAIN.COM "cat >> .ssh/authorized_keys"
                </div>
                <p>And this will be the last time you will be asked for the password. Test if everything went as expect executing</p>
                <div class="prettyprint">
                    ssh USER@DOMAIN.COM
                </div>
                <p>You should login immediately, without being asked for the password.</p>
            </div>
            ]]>
        </content>
        <image></image>
        <date>25 June, 2012</date>
        <category>tutorial</category>
        <tags>SSH, Bash</tags>
    </post>
    <post slug="google-chrome-fonts-fix">
        <title>Google Chrome fonts fix</title>
        <resume>Fix the renderization of fonts on Google Chrome</resume>
        <content>
            <![CDATA[
            <div class="post">
                <p>Google Chrome version 7.0.517.44 in my Fedora 13 box renders fonts in a funny way even after the instalation of the windows fonts.</p>
                <p>Fixed the problem creating the file ~/.fonts.conf with the following xml code:</p>

<pre class="prettyprint">
&lt;match target="font"&gt;
    &lt;edit name="autohint" mode="assign"&gt;
        &lt;bool&gt;true&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name="hinting" mode="assign"&gt;
        &lt;bool>true&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit mode="assign" name="hintstyle"&gt;
        &lt;const&gt;hintslight&lt;/const&gt;
    &lt;/edit&gt;
&lt;/match&gt;
</pre>
            </div>
            ]]>
        </content>
        <image></image>
        <date>22 May, 2012</date>
        <category>fix</category>
        <tags>Fonts, Google Chrome, Fedora</tags>
    </post>
    <post slug="custom-parameters-in-a-symfony2-project">
        <title>How to set custom parameters in a Symfony2 project</title>
        <resume>Use the service container to manage config values</resume>
        <content>
            <![CDATA[
            <div class="post">
                <p>In symfony 1.* we had app.yml, so we would define custom parameters and access them anywhere with the get static method of the sfConfig class. In Symfony2, there is no such thing as app.yml. In case we want to define custom parameters, we create a new file in app/config, for instance, settings.yml or settings.ini, an include it in the config.yml as an external resource (we could use the existing file parameters.ini, but not to mess up, I prefer to use a different file).</p>
                <p>So, in config.yml (or just in config_dev.yml if you prefer to make it available only in the dev environment)</p>
<pre class="prettyprint">
imports:
    - { resource: settings.yml }
</pre>
                <p>In settings.yml define your parameters:</p>
<pre class="prettyprint">
parameters:
    shared_folder: '/home/shared'
</pre>
                <p>To access this parameter in a controller:</p>
<pre class="prettyprint lang-php">
public function indexAction()
{
    $shared_folder = $this->container->getParameter('shared_folder');
}
</pre>
            </div>
            ]]>
        </content>
        <image></image>
        <date>5 May, 2012</date>
        <category>tutorial</category>
        <tags>Symfony2, Container, Parameters</tags>
    </post>
    <post slug="define-bundle-hierarchy-in-symfony2">
        <title>How to define a bundle as having a parent</title>
        <resume>Bundle hierarchy in Symfony2</resume>
        <content>
            <![CDATA[
            <div class="post">
                <p>As mentioned in the Symfony2 documentation, bundles can be organized hierarchically, this makes it easy to override controllers or templates. Unfortunately, the documentation lacks in showing how this can be achieved.</p>
                <p>Imagine that you are using the FOSUserBundle, and you create your own bundle named ZorbusUserBundle, to make ZorbusUserBundle a child of FOSUserBundle you need to create a method getParent in the ZorbusUserBundle class (src/Zorbus/UserBundle/ZorbusUserBundle.php) and return a string with the name of FOSUserBundle.</p>
<pre class="prettyprint lang-css">
&lt;?php
namespace Zorbus\UserBundle;

use Symfony\Component\HttpKernel\Bundle\Bundle;

class ZorbusUserBundle extends Bundle
{
    public function getParent()
    {
        return ‘FOSUserBundle’;
    }
}
</pre>
                <p>Don’t forget to clear the cache to make it work, even in dev environment. For this moment on, just replicate the structure of the FOSUserBundle in ZorbusUserBundle and it will be the one used by Symfony2, overrinding the parent bundle.</p>
            </div>
            ]]>
        </content>
        <image></image>
        <date>22 March, 2012</date>
        <category>tutorial</category>
        <tags>Symfony2, Doctrine, Cache</tags>
    </post>
    <post slug="version-symfony2-project-with-git">
        <title>How to version a Symfony2 project with git</title>
        <resume>Step by step to use git in a Symfony2 project</resume>
        <content>
            <![CDATA[
            <div class="post">
                <ol>
                    <li>at the root of the Symfony2 project create a file named .gitignore, this file will contain entries to be ignored by git</li>
                    <li>add to the .gitignore the following entries:
                        <ul class="unstyled prettyprint">
                            <li>/web/bundles/</li>
                            <li>/app/bootstrap*</li>
                            <li>/app/cache/*</li>
                            <li>/app/logs/*</li>
                            <li>/vendor/</li>
                            <li>/app/config/parameters.ini</li>
                        </ul>
                    </li>
                    <li>initialize the git repository:
<pre class="prettyprint">$ git init</pre>
                    </li>
                    <li>add all the project files but the ones in the .gitignore file
<pre class="prettyprint">$ git add .</pre>
                    </li>
                    <li>create an initial commit
<pre class="prettyprint">$ git commit -m "initial commit"</pre>
                    </li>
                    <li>To publish the project to GitHub, follow the <a href="http://help.github.com/linux-set-up-git/" target="_blank">official tutorial</a></li>
                </ol>
            </div>
            ]]>
        </content>
        <image></image>
        <date>4 September, 2011</date>
        <category>tutorial</category>
        <tags>Symfony2, Git</tags>
    </post>
    <post slug="free-xhtml-css-templates">
        <title>Free open source xhtml/css templates</title>
        <resume>Ready to use xhtml/css templates</resume>
        <content>
            <![CDATA[
            <div class="post">
                <p>A list of websites that offer free open source xhtml/css templates, it will come handy if you are a good designer like me.</p>
                <ul>
                    <li><a href="http://www.templatemo.com/" target="_blank">http://www.templatemo.com/</a></li>
                    <li><a href="http://www.oswd.org/" target="_blank">http://www.oswd.org/</a></li>
                    <li><a href="http://opensourcetemplates.org/" target="_blank">http://opensourcetemplates.org/</a></li>
                    <li><a href="http://www.os-templates.com/" target="_blank">http://www.os-templates.com/</a></li>
                    <li><a href="http://csstemplatesfree.net/" target="_blank">http://csstemplatesfree.net/</a></li>
                    <li><a href="http://www.oswt.co.uk/" target="_blank">http://www.oswt.co.uk/</a></li>
                    <li><a href="http://templates.arcsin.se" target="_blank">http://templates.arcsin.se</a></li>
                    <li><a href="http://csstemplatesfree.net" target="_blank">http://csstemplatesfree.net</a></li>
                    <li><a href="http://www.getfreewebdesigns.com/free-xhtml-templates/" target="_blank">http://www.getfreewebdesigns.com/free-xhtml-templates/</a></li>
                    <li><a href="http://www.freecsstemplates.org/" target="_blank">http://www.freecsstemplates.org/</a></li>
                    <li><a href="http://www.solucija.com/templates/free" target="_blank">http://www.solucija.com/templates/free</a></li>
                    <li><a href="http://www.styleshout.com/free-templates.php" target="_blank">http://www.styleshout.com/free-templates.php</a></li>
                    <li><a href="http://www.freelayoutsworld.com/free-layouts/" target="_blank">http://www.freelayoutsworld.com/free-layouts/</a></li>
                    <li><a href="http://www.zymic.com/free-templates/" target="_blank">http://www.zymic.com/free-templates/</a></li>
                    <li><a href="http://www.sixshootermedia.com/free-templates/" target="_blank">http://www.sixshootermedia.com/free-templates/</a></li>
                </ul>
            </div>
            ]]>
        </content>
        <image></image>
        <date>22 March, 2011</date>
        <category>resources</category>
        <tags>Templates</tags>
    </post>
    <post slug="manage-package-xml-file">
        <title>Manage package.xml for pear packages</title>
        <resume>Using the pfm command to the rescue</resume>
        <content>
            <![CDATA[
            <div class="post">
                <p>When creating pear packages, it is a pain to generate the package.xml file if you do it by hand.</p>
                <p>To the rescue there is a package called <a href="http://pear.php.net/package/PEAR_PackageFileManager_Cli" target="_blank">PackageFileManager_Cli</a> available in the pear repository.</p>
                <p>At the moment, the package is in alpha and not not maintained anymore, but works as expected. So far, no bugs.</p>
                <h4>Deployment</h4>
                <p>As root:</p>
<pre class="prettyprint">
$ sudo bash
# pear config-set preferred_state alpha
# pear install -a PEAR_PackageFileManager_Cli
# exit
</pre>
                <p>After running the previous commands, a new command called <strong>pfm</strong> will be available, just execute it at the root of your project.</p>
                <p>Follow the instructions and at the end you will get the package.xml file. An extra step will be needed before generating the final tgz package.</p>
                <p>Open the file package.xml and replace all the occurences of role=”php” with role=”data", otherwise those files won't be included in the package.</p>
                <p>With vim, execute</p>
<pre class="prettyprint">
:%s/role=”php/role=”data
:x
</pre>
                <p>To generate the tgz file run</p>
<pre class="prettyprint">
$ pear package
</pre>
                <p>When you need to update the package.xml file, just execute again the pfm command, no need to edit the file by hand unless you add new php files.</p>
            </div>
            ]]>
        </content>
        <image></image>
        <date>4 March, 2011</date>
        <category>tutorial</category>
        <tags>Symfony2, Doctrine, Cache</tags>
    </post>
</blog>
